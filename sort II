#include <iostream>
#include <iomanip>
#include <fstream>
#include <cmath>
#include <vector>
#include <list>
#include <string>
#include <algorithm>
using namespace std;


ifstream in("input.txt");
ofstream out("output.txt");

bool ok(int a, int b, int k) {
	if (k % 2 != 0) return a < b;
	return a > b;
}


int findpivot(int i, int j, int* a) {
	int firstkey = a[i];
	for (int k = i + 1; k <= j; k++) {
		if (a[k] > firstkey) {
			return k;
		}
		else {
			return i;
		}
	}
	return 0;

}
int partition(int i, int j, int pivot, int* a) {
	int l = i, r = j;
	do {
		while (a[l] < pivot)l++;
		while (a[r] >= pivot)r--;
		if (r > l) swap(a[l], a[r]);
	} while (l <= r);
	return l;

}
void quicksort(int i, int j, int* a)
{
	int pivotindex = findpivot(i, j, a);
	if (pivotindex != 0) {
		int pivot = a[pivotindex];
		int k = partition(i, j, pivot, a);
		quicksort(i, k - 1, a);
		quicksort(k, j, a);
	}
}



void pushdown(int* a, int first, int last)
/* элементы a[first]…a[last] составляют частично упорядоченное дерево за
исключением, возможно a[first] и сыновей. pushdown восстанавливает частично
упорядоченное дерево */
{
	int r = first;
	while (r <= last / 2)
	{
		//Если один сын
		if (last == 2 * r)
		{
			//проверяем, не нарушена ли упорядоченность по отношению к нему
			//если нарушена, меняем местами
			if (a[r] > a[2 * r]) {
				swap(a[r], a[2 * r]);
			}

			r = last;
		}
		else
			//если два сына, проверяем, если кто-то из них меньше родителя, меняем его с
			//родителем местами и переходим к этому сыну
			if (a[r] > a[2 * r] && a[2 * r] <= a[2 * r + 1])
			{
				swap(a[r], a[2 * r]);
				r = 2 * r;
			}

			else
				if (a[r] > a[2 * r] && a[2 * r + 1] < a[2 * r])
				{
					swap(a[r], a[2 * r + 1]);
					r = 2 * r + 1;

				}
				else
					//если ничего нигде не нарушено, уходим на последний элмент
					r = last;
	}
}
void heapSort(int* a, int n)
//сортирует элементы массива в убывающем порядке
{
	//создание частично упорядоченного дерева
	for (int i = n / 2; i >= 1; i--) //1
		pushdown(a, i, n); //2
	for (int i = n; i >= 2; i--) //3
	{
		//меняем местами первый – минимальный и последний текущий
		swap(a[1], a[i]); //4
		//исключаем из рассмотрения последний текущий и восстанавливаем частично
		//упорядоченное дерево

		pushdown(a, 1, i - 1); //5
	}
}





void insert_sort(int* a, int n, int k) {
    int j = 0;
    for (int i = 1; i < n; i++) {
        j = i;
        while (j > 0 && ok(a[j - 1], a[j], k)) {
            swap(a[j - 1], a[j]);
            j--;
        }
    }
}

int a[100][100];
int b[100];


int main()
{
    int n, m, i, j;
    int a[100][100];
    in >> n >> m;
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            in >> a[i][j];
        }
    }
    for (j = 0; j < m; j++) {
        for (i = 0; i < n; i++) {
            b[i + 1] = a[i][j];
        }
        quicksort(1, n, b);
		if (j % 2 != 0) {
			for (i = 0; i < n; i++) {
				a[i][j] = b[i + 1];
			}
		}
		else {
			for (i = 0; i < n; i++) {
				a[i][j] = b[n - i];
			}
		}
        
    }
    out << n << '\t' << m << '\n';
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            out << setw(5) << a[i][j];
        }
        out << '\n';
    }
    in.close();
    out.close();
    return 0;
}
